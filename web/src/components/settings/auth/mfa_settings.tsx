import { Button, Card, Loading, Spacer, Text, Row } from "@nextui-org/react";
import { useEffect, useState } from "react";
import { AlertCircle } from "react-feather";
import NextLink from "next/link";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { Factor } from "@supabase/supabase-js";
import { ConfirmButton } from "@/components/confirm_button";

export function MFASettings() {
  const supabase = useSupabaseClient();
  const [loading, setLoading] = useState(true);
  const [factors, setFactors] = useState<Factor[]>([]);
  const [error, setError] = useState<String>(""); // holds an error message

  const populate = async () => {
    setLoading(true);
    setError("");
    const { data, error } = await supabase.auth.mfa.listFactors();
    setLoading(false);
    if (error) {
      setError("Error retrieving MFA information.");
      throw error;
    }

    setFactors(data.totp);
  };

  useEffect(() => {
    populate();
  }, []);

  return (
    <>
      {error && <Text color="error">Error: {error}</Text>}
      {/*Loading skeleton*/}
      {loading && (
        <>
          <Card
            variant="bordered"
            css={{
              background: "$backgroundContrast",
              borderColor: "$border",
              px: "0.5em",
              minHeight: "15rem",
            }}
          >
            <Card.Header css={{ display: "block", pb: "0" }}>
              <Row align="center">
                <Text h3 css={{ mb: "0" }}>
                  Multi-Factor Authentication
                </Text>{" "}
                <Spacer x={0.7} /> <Loading size="sm" color="white" />
              </Row>
            </Card.Header>
          </Card>
        </>
      )}

      {/*Loaded content*/}
      {!loading && (
        <>
          {factors.length == 0 ? (
            <>
              <UnenrolledMFACard />
            </>
          ) : (
            <>
              <EnrolledMFACard factors={factors} refresh={populate} />
            </>
          )}
        </>
      )}
    </>
  );
}

function UnenrolledMFACard() {
  return (
    <Card
      variant="bordered"
      css={{
        background: "$backgroundContrast",
        borderColor: "$border",
        px: "0.5em",
      }}
    >
      <Card.Header css={{ display: "block", pb: "0" }}>
        <Text h3 css={{ mb: "18px" }}>
          Multi-Factor Authentication
        </Text>
        <Row align="center">
          <AlertCircle color="red" size={22} />
          <Spacer x={0.1} />
          <Text>
            Your account does not have multi-factor authentication enabled.
          </Text>
        </Row>
      </Card.Header>
      <Card.Body>
        <Text>
          Multi-factor authentication (MFA) provides an additional layer of
          security for your account. Once enabled, you will be prompted to enter
          a unique verification code either generated by your authenticator app
          or sent to your phone number when you sign in.
        </Text>
      </Card.Body>
      <Card.Footer css={{ pb: "1.5em" }}>
        <NextLink href="/auth/mfa/enroll">
          <Button flat color="primary">
            Enable MFA
          </Button>
        </NextLink>
      </Card.Footer>
    </Card>
  );
}

function EnrolledMFACard({
  factors,
  refresh,
}: {
  factors: Factor[];
  refresh: () => Promise<void>;
}) {
  const [loading, setLoading] = useState(false);

  const supabase = useSupabaseClient();

  const removeMFA = async (factor: Factor) => {
    setLoading(true);
    await supabase.auth.mfa.unenroll({ factorId: factor.id });

    // Refresh token such the MFA state is unenrolled.
    await supabase.auth.refreshSession();

    setLoading(false);

    // Refresh MFA settings
    refresh();
  };

  return (
    <Card
      variant="bordered"
      css={{
        background: "$backgroundContrast",
        borderColor: "$border",
        px: "0.5em",
      }}
    >
      <Card.Header css={{ display: "block", pb: "0" }}>
        <Text h3 css={{ mb: "0" }}>
          Multi-Factor Authentication
        </Text>
      </Card.Header>
      <Card.Body>
        {factors.map((factor, index) => {
          return (
            <Row
              key={index}
              align={"center"}
              justify={"space-between"}
              css={{ mt: "0.5rem" }}
            >
              <div>Authenticator App</div>
              <div>
                Status: {factor.status == "verified" ? "Active" : factor.status}
              </div>
              <div>
                <ConfirmButton
                  auto
                  bordered
                  color="error"
                  confirmationmessage="Confirm"
                  onPress={() => {
                    removeMFA(factor);
                  }}
                >
                  {loading ? (
                    <Loading color="currentColor" size="sm" />
                  ) : (
                    <>Deactivate</>
                  )}
                </ConfirmButton>
              </div>
            </Row>
          );
        })}
      </Card.Body>
    </Card>
  );
}
